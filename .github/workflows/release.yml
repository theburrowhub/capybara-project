name: Release Multi-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Determine if pre-release
      id: check_prerelease
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          if [[ "$VERSION" =~ alpha ]]; then
            echo "release_type=Alpha" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ beta ]]; then
            echo "release_type=Beta" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ rc ]]; then
            echo "release_type=Release Candidate" >> $GITHUB_OUTPUT
          fi
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "release_type=Stable Release" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Capybara Shoot'em Up ${{ steps.get_version.outputs.version }} (${{ steps.check_prerelease.outputs.release_type }})
        prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
        body: |
          ## Capybara Shoot'em Up - Release ${{ steps.get_version.outputs.version }}
          
          ### Download
          Download the appropriate package for your platform:
          - **Linux**: `capybara-shootemup-linux-x86_64.tar.gz`
          - **macOS**: `capybara-shootemup-macos-universal.tar.gz`
          - **Windows**: `capybara-shootemup-windows-x86_64.zip`
          
          ### Installation
          
          #### Linux
          ```bash
          tar xzf capybara-shootemup-linux-x86_64.tar.gz
          cd capybara-shootemup-linux
          ./run.sh
          # Or directly: ./shootemup
          ```
          
          #### macOS
          ```bash
          tar xzf capybara-shootemup-macos-universal.tar.gz
          cd capybara-shootemup-macos
          ./run.sh
          # Or directly: ./shootemup
          ```
          
          #### Windows
          1. Extract the ZIP file
          2. Double-click `run.bat` or `shootemup.exe`
          
          ### What's New
          - See [CHANGELOG.md](CHANGELOG.md) for details
          
          ### System Requirements
          - OpenGL 3.3+ compatible graphics
          - 512MB RAM minimum
          - 100MB disk space
          
          ### Documentation Included
          - **USER_MANUAL.pdf** - Complete user guide with controls, gameplay, and features
          - **GAMEPLAY.md** - Quick reference for controls
          - **README.md** - Project overview
          
          ### Release Type
          This is a **${{ steps.check_prerelease.outputs.release_type }}**
          ${{ steps.check_prerelease.outputs.is_prerelease == 'true' && '⚠️ Pre-release version - use for testing only!' || '✅ Stable release - production ready!' }}
        draft: false

  build-linux-release:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libasound2-dev \
          libx11-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxcursor-dev \
          libxinerama-dev \
          libwayland-dev \
          libxkbcommon-dev \
          sqlite3 \
          libsqlite3-dev
    
    - name: Build and install raylib from source (static)
      run: |
        git clone --depth 1 --branch 5.5 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        
    - name: Configure CMake (Static Build)
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=ON -DBUILD_GAME=ON -DBUILD_TOOLS=ON -DBUILD_DEMOS=ON
          
    - name: Install LaTeX for manual
      run: |
        sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-fonts-recommended
        
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        strip shootemup
        
    - name: Build User Manual
      run: |
        cd docs
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        mv USER_MANUAL_SIMPLE.pdf USER_MANUAL.pdf || true
        cd ..
        
    - name: Create release package
      run: |
        mkdir -p release/capybara-shootemup-linux
        cp build/shootemup release/capybara-shootemup-linux/
        cp -r assets release/capybara-shootemup-linux/ || true
        cp README.md release/capybara-shootemup-linux/
        cp docs/GAMEPLAY.md release/capybara-shootemup-linux/ || true
        cp docs/USER_MANUAL.pdf release/capybara-shootemup-linux/ || true
        echo "#!/bin/bash" > release/capybara-shootemup-linux/run.sh
        echo "cd \"\$(dirname \"\$0\")\"" >> release/capybara-shootemup-linux/run.sh
        echo "./shootemup" >> release/capybara-shootemup-linux/run.sh
        chmod +x release/capybara-shootemup-linux/run.sh
        cd release
        tar czf capybara-shootemup-linux-x86_64.tar.gz capybara-shootemup-linux/
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/capybara-shootemup-linux-x86_64.tar.gz
        asset_name: capybara-shootemup-linux-x86_64.tar.gz
        asset_content_type: application/gzip

  build-macos-release:
    needs: create-release
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        brew update
        brew install cmake pkg-config sqlite3
        
    - name: Build and install raylib from source
      run: |
        git clone --depth 1 --branch 5.5 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        make -j$(sysctl -n hw.ncpu)
        sudo make install
        
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=OFF -DBUILD_GAME=ON -DBUILD_TOOLS=ON -DBUILD_DEMOS=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          
    - name: Install LaTeX for manual
      run: |
        brew install --cask mactex-no-gui || brew install basictex
        eval "$(/usr/libexec/path_helper)"
        
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
        strip shootemup
        
    - name: Build User Manual
      run: |
        eval "$(/usr/libexec/path_helper)"
        cd docs
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        mv USER_MANUAL_SIMPLE.pdf USER_MANUAL.pdf || true
        cd ..
        
    - name: Create release package
      run: |
        mkdir -p release/capybara-shootemup-macos
        cp build/shootemup release/capybara-shootemup-macos/
        cp -r assets release/capybara-shootemup-macos/ || true
        cp README.md release/capybara-shootemup-macos/
        cp docs/GAMEPLAY.md release/capybara-shootemup-macos/ || true
        cp docs/USER_MANUAL.pdf release/capybara-shootemup-macos/ || true
        echo "#!/bin/bash" > release/capybara-shootemup-macos/run.sh
        echo "cd \"\$(dirname \"\$0\")\"" >> release/capybara-shootemup-macos/run.sh
        echo "./shootemup" >> release/capybara-shootemup-macos/run.sh
        chmod +x release/capybara-shootemup-macos/run.sh
        cd release
        tar czf capybara-shootemup-macos-universal.tar.gz capybara-shootemup-macos/
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/capybara-shootemup-macos-universal.tar.gz
        asset_name: capybara-shootemup-macos-universal.tar.gz
        asset_content_type: application/gzip

  build-windows-release:
    needs: create-release
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-sqlite3
          make
          git
          
    - name: Build and install raylib from source
      shell: msys2 {0}
      run: |
        git clone --depth 1 --branch 5.5 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/mingw64
        mingw32-make -j$(nproc)
        mingw32-make install
        
    - name: Configure CMake (Static Build)
      shell: msys2 {0}
      run: |
        mkdir -p build
        cd build
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=ON -DBUILD_GAME=ON -DBUILD_TOOLS=ON -DBUILD_DEMOS=ON
          
    - name: Install LaTeX for manual
      shell: msys2 {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-texlive-core
        
    - name: Build
      shell: msys2 {0}
      run: |
        cd build
        mingw32-make -j$(nproc)
        strip shootemup.exe
        
    - name: Build User Manual
      shell: msys2 {0}
      run: |
        cd docs
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        pdflatex -interaction=nonstopmode USER_MANUAL_SIMPLE.tex || true
        mv USER_MANUAL_SIMPLE.pdf USER_MANUAL.pdf || true
        cd ..
        
    - name: Create release package
      shell: msys2 {0}
      run: |
        mkdir -p release/capybara-shootemup-windows
        cp build/shootemup.exe release/capybara-shootemup-windows/
        cp -r assets release/capybara-shootemup-windows/ || true
        cp README.md release/capybara-shootemup-windows/
        cp docs/GAMEPLAY.md release/capybara-shootemup-windows/ || true
        cp docs/USER_MANUAL.pdf release/capybara-shootemup-windows/ || true
        echo "@echo off" > release/capybara-shootemup-windows/run.bat
        echo "cd /d %~dp0" >> release/capybara-shootemup-windows/run.bat
        echo "shootemup.exe" >> release/capybara-shootemup-windows/run.bat
        
    - name: Create zip archive
      shell: pwsh
      run: |
        Compress-Archive -Path release/capybara-shootemup-windows/* -DestinationPath release/capybara-shootemup-windows-x86_64.zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release/capybara-shootemup-windows-x86_64.zip
        asset_name: capybara-shootemup-windows-x86_64.zip
        asset_content_type: application/zip

