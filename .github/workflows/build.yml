name: Build Multi-Platform

on:
  # Only run on pull requests and manual triggers
  # Releases are handled by release.yml
  pull_request:
    branches: [ main, master, develop, pipeline ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libasound2-dev \
          libx11-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxcursor-dev \
          libxinerama-dev \
          libwayland-dev \
          libxkbcommon-dev \
          sqlite3 \
          libsqlite3-dev
    
    - name: Build and install raylib from source (static)
      run: |
        git clone --depth 1 --branch 5.0 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        
    - name: Configure CMake (Static Build)
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC=ON \
          -DBUILD_GAME=ON \
          -DBUILD_TOOLS=ON \
          -DBUILD_DEMOS=ON
          
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        
    - name: Create artifacts directory
      run: |
        mkdir -p artifacts/linux
        cp build/shootemup artifacts/linux/ || echo "Main game not built"
        cp build/enemy_showcase artifacts/linux/ || echo "Enemy showcase not built"
        cp build/generate_enemy_sprites artifacts/linux/ || echo "Sprite generator not built"
        cp build/populate_highscores artifacts/linux/ || echo "Populate highscores not built"
        cp -r assets artifacts/linux/ || echo "No assets to copy"
        cp README.md artifacts/linux/ || echo "No README"
        
    - name: Test binary (check it runs)
      run: |
        file artifacts/linux/shootemup
        ldd artifacts/linux/shootemup || echo "Static binary - no dynamic dependencies expected"
        
    - name: Create tarball
      run: |
        cd artifacts
        tar czf capybara-shootemup-linux-x86_64.tar.gz linux/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capybara-shootemup-linux-x86_64
        path: artifacts/capybara-shootemup-linux-x86_64.tar.gz
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        brew update
        brew install cmake pkg-config sqlite3
        
    - name: Build and install raylib from source
      run: |
        git clone --depth 1 --branch 5.0 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
        make -j$(sysctl -n hw.ncpu)
        sudo make install
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC=OFF \
          -DBUILD_GAME=ON \
          -DBUILD_TOOLS=ON \
          -DBUILD_DEMOS=ON \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
          
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
        
    - name: Create artifacts directory
      run: |
        mkdir -p artifacts/macos
        cp build/shootemup artifacts/macos/ || echo "Main game not built"
        cp build/enemy_showcase artifacts/macos/ || echo "Enemy showcase not built"
        cp build/generate_enemy_sprites artifacts/macos/ || echo "Sprite generator not built"
        cp build/populate_highscores artifacts/macos/ || echo "Populate highscores not built"
        cp -r assets artifacts/macos/ || echo "No assets to copy"
        cp README.md artifacts/macos/ || echo "No README"
        
    - name: Test binary
      run: |
        file artifacts/macos/shootemup
        otool -L artifacts/macos/shootemup
        
    - name: Create tarball
      run: |
        cd artifacts
        tar czf capybara-shootemup-macos-universal.tar.gz macos/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capybara-shootemup-macos-universal
        path: artifacts/capybara-shootemup-macos-universal.tar.gz
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-sqlite3
          make
          
    - name: Build and install raylib from source
      shell: msys2 {0}
      run: |
        git clone --depth 1 --branch 5.0 https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_INSTALL_PREFIX=/mingw64
        mingw32-make -j$(nproc)
        mingw32-make install
        
    - name: Configure CMake (Static Build)
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_STATIC=ON \
          -DBUILD_GAME=ON \
          -DBUILD_TOOLS=ON \
          -DBUILD_DEMOS=ON
          
    - name: Build
      shell: msys2 {0}
      run: |
        cd build
        mingw32-make -j$(nproc)
        
    - name: Create artifacts directory
      shell: msys2 {0}
      run: |
        mkdir -p artifacts/windows
        cp build/shootemup.exe artifacts/windows/ || echo "Main game not built"
        cp build/enemy_showcase.exe artifacts/windows/ || echo "Enemy showcase not built"
        cp build/generate_enemy_sprites.exe artifacts/windows/ || echo "Sprite generator not built"
        cp build/populate_highscores.exe artifacts/windows/ || echo "Populate highscores not built"
        cp -r assets artifacts/windows/ || echo "No assets to copy"
        cp README.md artifacts/windows/ || echo "No README"
        
    - name: Copy MinGW runtime (if needed)
      shell: msys2 {0}
      run: |
        # Copy necessary DLLs if not fully static
        ldd build/shootemup.exe | grep mingw | awk '{print $3}' | xargs -I {} cp {} artifacts/windows/ || echo "Fully static or no mingw deps"
        
    - name: Create zip archive
      shell: pwsh
      run: |
        Compress-Archive -Path artifacts/windows/* -DestinationPath artifacts/capybara-shootemup-windows-x86_64.zip
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: capybara-shootemup-windows-x86_64
        path: artifacts/capybara-shootemup-windows-x86_64.zip
        retention-days: 30

